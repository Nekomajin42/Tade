"use strict";

goog.provide("Blockly.Blocks.turtle");

goog.require("Blockly.Blocks");

/**
 * MAIN
 */
Blockly.Blocks["turtle_main"] =
{
	init: function()
	{
		this.deletable = false;
		this.appendStatementInput("T√ñRZS")
			.appendField("üê¢");
		this.setTooltip("Innen indul a tekn≈ës.");
		this.setColour(120);
	}
};

/**
 * DRAW/GO
 */
Blockly.Blocks["turtle_go"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Menj")
			.appendField(new Blockly.FieldDropdown([
													["el≈ëre", "el≈ëre"],
													["h√°tra", "h√°tra"]
												]), "IR√ÅNY")
			.appendField("ennyit:")
			.appendField(new Blockly.FieldTextInput("0"), "MENNYIT");
		this.setTooltip("Adott ir√°nyba, adott pixelnyit megy a tekn≈ës.");
		this.setColour(240);
	}
};

/**
 * TURN
 */
Blockly.Blocks["turtle_turn"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Fordulj")
			.appendField(new Blockly.FieldDropdown([
													["balra", "balra"],
													["jobbra", "jobbra"]
												]), "IR√ÅNY")
			.appendField("ennyit:")
			.appendField(new Blockly.FieldTextInput("0"), "MENNYIT");
		this.setTooltip("Adott ir√°nyba, adott fokot fordul a tekn≈ës.");
		this.setColour(240);
	}
};

/**
 * FILL
 */
Blockly.Blocks["turtle_fill"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Kit√∂lt");
		this.setTooltip("Kifesti a legutolj√°ra rajzolt alakzatot.");
		this.setColour(240);
	}
};

/**
 * PEN UP/DOWN
 */
Blockly.Blocks["turtle_pen"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Tollat")
			.appendField(new Blockly.FieldDropdown([
													["fel", "fel"],
													["le", "le"]
												]), "IR√ÅNY");
		this.setTooltip("A tekn≈ës felemeli vagy leteszi a toll√°t.");
		this.setColour(240);
	}
};

/**
 * FILL COLOR
 */
Blockly.Blocks["turtle_fillcolor"] =
{
	init: function()
	{
		var color = new Blockly.FieldColour("White");
		color.setColours(["Black", "Grey", "LightGrey", "White", "Blue", "LightBlue", "Green", "LightGreen", "Red", "Pink", "Orange", "Yellow"]).setColumns(4);
		
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Kit√∂lt≈ë sz√≠n:")
			.appendField(color, "SZ√çN");
		this.setTooltip("Megv√°ltoztatja a tekn≈ës kit√∂lt≈ë sz√≠n√©t.");
		this.setColour(240);
	}
};

/**
 * LINE COLOR
 */
Blockly.Blocks["turtle_linecolor"] =
{
	init: function()
	{
		var color = new Blockly.FieldColour("Black");
		color.setColours(["Black", "Grey", "LightGrey", "White", "Blue", "LightBlue", "Green", "LightGreen", "Red", "Pink", "Orange", "Yellow"]).setColumns(4);
		
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Vonalsz√≠n:")
			.appendField(color, "SZ√çN");
		this.setTooltip("Megv√°ltoztatja a tekn≈ës vonalsz√≠n√©t.");
		this.setColour(240);
	}
};

/**
 * PEN WIDTH
 */
Blockly.Blocks["turtle_linewidth"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Vonalvastags√°g:")
			.appendField(new Blockly.FieldTextInput("1"), "VASTAGS√ÅG");
		this.setTooltip("Megv√°ltoztatja a tekn≈ës vonalvastags√°g√°t.");
		this.setColour(240);
	}
};

/**
 * HOME
 */
Blockly.Blocks["turtle_home"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Haza");
		this.setTooltip("A tekn≈ës visszaugrik a kezd≈ëpontba.");
		this.setColour(240);
	}
};

/**
 * FOR LOOP
 */
Blockly.Blocks["turtle_loopfor"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Ism√©teld ennyiszer:")
			.appendField(new Blockly.FieldTextInput("1"), "ISM√âTELD");
		this.appendStatementInput("T√ñRZS");
		this.setTooltip("Megism√©tli a blokk belsej√©ben l√©v≈ë utas√≠t√°sokat.");
		this.setColour(0);
	}
};

/**
 * WHILE LOOP
 */
Blockly.Blocks["turtle_loopwhile"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Ism√©teld am√≠g")
			.appendField(new Blockly.FieldTextInput("1"), "ISM√âTELD");
		this.appendStatementInput("T√ñRZS");
		this.setTooltip("Megism√©tli a blokk belsej√©ben l√©v≈ë utas√≠t√°sokat.");
		this.setColour(0);
	}
};

/**
 * IF STATEMENT
 */
Blockly.Blocks["turtle_if"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Ha")
			.appendField(new Blockly.FieldTextInput("1"), "FELT√âTEL");
		this.appendStatementInput("HA");
		this.setTooltip("Ha a felt√©tel igaz, akkor elv√©gzi a blokk belsej√©ben l√©v≈ë utas√≠t√°sokat.");
		this.setColour(0);
	}
};

/**
 * IF-ELSE STATEMENT
 */
Blockly.Blocks["turtle_ifelse"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("Ha")
			.appendField(new Blockly.FieldTextInput("1"), "FELT√âTEL");
		this.appendStatementInput("HA");
		this.appendDummyInput()
			.appendField("k√ºl√∂nben")
		this.appendStatementInput("KƒÇ≈õLƒÇ‚ÄìNBEN");
		this.setTooltip("Ha a felt√©tel igaz, akkor az els≈ë csoportban l√©v≈ë utas√≠t√°sokat v√©gzi el, ha pedig hamis, akkor a m√°sodik csoportban l√©v≈ëket.");
		this.setColour(0);
	}
};

/**
 * VARIABLE DEFINITION
 */
Blockly.Blocks["turtle_vardef"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("V√°ltoz√≥")
			.appendField(new Blockly.FieldTextInput("x"), "N√âV")
			.appendField("=")
			.appendField(new Blockly.FieldTextInput("1"), "√âRT√âK");
		this.setTooltip("L√©trehoz vagy megv√°ltoztat egy v√°ltoz√≥t a megadott n√©vvel √©s √©rt√©kkel.");
		this.setColour(180);
	}
};

/**
 * RANDOM NUMBER
 */
Blockly.Blocks["turtle_randomnumber"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("V√©letlen")
			.appendField(new Blockly.FieldTextInput("x"), "N√âV")
			.appendField("=")
			.appendField(new Blockly.FieldTextInput("1"), "T√ìL")
			.appendField(":")
			.appendField(new Blockly.FieldTextInput("10"), "IG");
		this.setTooltip("V√©letlenszer≈±en gener√°l egy eg√©sz sz√°mot a megadott √©rt√©kek k√∂z√∂tt.");
		this.setColour(180);
	}
};

/**
 * FUNCTION DEFINITON
 */
Blockly.Blocks["turtle_functiondef"] =
{
	init: function()
	{
		this.appendDummyInput()
			.appendField("Megtanul")
			.appendField(new Blockly.FieldTextInput("m≈±velet"), "N√âV")
			.appendField("param√©terek:")
			.appendField(new Blockly.FieldTextInput(""), "PARAM√âTEREK");
		this.appendStatementInput("T√ñRZS");
		this.setTooltip("L√©trehoz egy f√ºggv√©nyt a megadott n√©vvel, bemeneti param√©terekkel √©s a blokk belsej√©ben l√©v≈ë m≈±veletekkel.");
		this.setColour(120);
	}
};

/**
 * FUNCTION CALL
 */
Blockly.Blocks["turtle_functioncall"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("V√©grehajt")
			.appendField(new Blockly.FieldTextInput("m≈±velet"), "N√âV")
			.appendField("param√©terek:")
			.appendField(new Blockly.FieldTextInput(""), "PARAM√âTEREK");
		this.setTooltip("Megh√≠v egy f√ºggv√©nyt a megadott n√©vvel √©s bemeneti param√©terekkel.");
		this.setColour(120);
	}
};

/**
 * RANDOM COLOR
 */
Blockly.Blocks["turtle_randomcolor"] =
{
	init: function()
	{
		this.setPreviousStatement(true);
		this.setNextStatement(true);
		this.appendDummyInput()
			.appendField("V√©letlen")
			.appendField(new Blockly.FieldDropdown([
													["vonal", "vonal"],
													["kit√∂lt≈ë", "kit√∂lt≈ë"]
												]), "MELYIK")
			.appendField("sz√≠n");
		this.setTooltip("V√©letlenszer≈± sz√≠n≈±re √°ll√≠tja a vonal vagy a k√∂t√∂lt√©s sz√≠n√©t.");
		this.setColour(120);
	}
};